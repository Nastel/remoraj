#
#
# Copyright (c) 2019-2020 NasTel Technologies, Inc. All Rights Reserved.
#
# This software is the confidential and proprietary information of NasTel
# Technologies, Inc. ("Confidential Information").  You shall not disclose
# such Confidential Information and shall use it only in accordance with
# the terms of the license agreement you entered into with NasTel
# Technologies.
#
# NASTEL MAKES NO REPRESENTATIONS OR WARRANTIES ABOUT THE SUITABILITY OF
# THE SOFTWARE, EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO
# THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
# PURPOSE, OR NON-INFRINGEMENT. NASTEL SHALL NOT BE LIABLE FOR ANY DAMAGES
# SUFFERED BY LICENSEE AS A RESULT OF USING, MODIFYING OR DISTRIBUTING
# THIS SOFTWARE OR ITS DERIVATIVES.
#
# CopyrightVersion 1.0
#

; TNT4J-Streams sink Definitions
{
source: streams.sinks

; event sink configuration: destination and data format
event.formatter: com.jkoolcloud.tnt4j.format.JSONFormatter
#event.formatter.Newline: true
; Configures special numeric values handling. Can be one of: SUPPRESS, ENQUOTE, MAINTAIN. Default value: SUPPRESS
#event.formatter.SpecNumbersHandling: SUPPRESS

; BroadcastingEventSinkFactory allows publishing events to multiple sinks
; can be configured with multiple event sinks using '.EventSinkFactory.<sink-name>.'
event.sink.factory: com.jkoolcloud.tnt4j.sink.impl.BroadcastingEventSinkFactory
event.sink.factory.BroadcastSequence: prod
#event.sink.factory.BroadcastSequence: prod,qa
#event.sink.factory.BroadcastSequence: prod,other

; Configure default sink filter based on level
; and apply automatic duplicate event suppression
#event.sink.factory.Filter: com.jkoolcloud.tnt4j.filters.EventLevelTimeFilter
#event.sink.factory.Filter.Level: TRACE
#event.sink.factory.Filter.SuppressDups: true
#event.sink.factory.Filter.SuppressTimeSec: 30
#event.sink.factory.Filter.SuppressCacheSize: 500
##event.sink.factory.Filter.SuppressUseSoundex: true
; Uncomment lines below to filter out events based on elapsed time and wait time
; Timed event/activities greater or equal to given values will be logged
##event.sink.factory.Filter.ElapsedUsec: 100
##event.sink.factory.Filter.WaitUsec: 100

; production environment (event sink for PROD)
#### NOTE: IT IS NOT RECOMMENDED TO USE BufferedEventSinkFactory (asynchronous sinks) WITH STREAMS. Streams and sinks are meant to
#### act in sync, especially when sink (e.g., 'JKCloud', 'Mqtt', 'Kafka') consumer uses network communication. ####
#event.sink.factory.EventSinkFactory.prod: com.jkoolcloud.tnt4j.sink.impl.BufferedEventSinkFactory
#event.sink.factory.EventSinkFactory.prod.PooledLoggerFactory: com.jkoolcloud.tnt4j.sink.impl.PooledLoggerFactoryImpl
#event.sink.factory.EventSinkFactory.prod.PooledLoggerFactory.Name: JKOOL-PROD
#event.sink.factory.EventSinkFactory.prod.PooledLoggerFactory.Size: 5
#event.sink.factory.EventSinkFactory.prod.PooledLoggerFactory.Capacity: 1000

#### jKoolCloud 'prod' event sink factory configuration ####
event.sink.factory.EventSinkFactory.prod: com.jkoolcloud.jesl.tnt4j.sink.JKCloudEventSinkFactory
##### streamed activity entities logging over SLF4J sink #####
##### NOTE: logger name should match log4j.properties defined logger name mapped to use 'activities_prod_log' appender #####
event.sink.factory.EventSinkFactory.prod.LogSink: slf4j:com.jkoolcloud.tnt4j.streams.activities_prod_log
event.sink.factory.EventSinkFactory.prod.Url: https://data.jkoolcloud.com/
event.sink.factory.EventSinkFactory.prod.Token: df677e04-7ce5-4039-976c-0440ca931055
#### jKoolCloud 'prod' event sink factory configuration end ####

; QA environment (event sink for QA)
#### NOTE: IT IS NOT RECOMMENDED TO USE BufferedEventSinkFactory (asynchronous sinks) WITH STREAMS. Streams and sinks are meant to
#### act in sync, especially when sink (e.g., 'JKCloud', 'Mqtt', 'Kafka') consumer uses network communication. ####
#event.sink.factory.EventSinkFactory.qa: com.jkoolcloud.tnt4j.sink.impl.BufferedEventSinkFactory
#event.sink.factory.EventSinkFactory.qa.PooledLoggerFactory: com.jkoolcloud.tnt4j.sink.impl.PooledLoggerFactoryImpl
#event.sink.factory.EventSinkFactory.qa.PooledLoggerFactory.Name: JKOOL-QA
#event.sink.factory.EventSinkFactory.qa.PooledLoggerFactory.Size: 5
#event.sink.factory.EventSinkFactory.qa.PooledLoggerFactory.Capacity: 1000

#### jKoolCloud 'qa' event sink factory configuration ####
event.sink.factory.EventSinkFactory.qa: com.jkoolcloud.jesl.tnt4j.sink.JKCloudEventSinkFactory
##### streamed activity entities logging over SLF4J sink #####
##### NOTE: logger name should match log4j.properties defined logger name mapped to use 'activities_qa_log' appender #####
event.sink.factory.EventSinkFactory.qa.LogSink: slf4j:com.jkoolcloud.tnt4j.streams.activities_qa_log
event.sink.factory.EventSinkFactory.qa.Url: https://qa.jkoolcloud.com
event.sink.factory.EventSinkFactory.qa.Token: remoraj-qa-access-token
#### jKoolCloud 'qa' event sink factory configuration end ####

; Other environments (event sinks for OTHER)
#### NOTE: IT IS NOT RECOMMENDED TO USE BufferedEventSinkFactory (asynchronous sinks) WITH STREAMS. Streams and sinks are meant to
#### act in sync, especially when sink (e.g., 'JKCloud', 'Mqtt', 'Kafka') consumer uses network communication. ####
#event.sink.factory.EventSinkFactory.other: com.jkoolcloud.tnt4j.sink.impl.BufferedEventSinkFactory
#event.sink.factory.EventSinkFactory.other.PooledLoggerFactory: com.jkoolcloud.tnt4j.sink.impl.PooledLoggerFactoryImpl
#event.sink.factory.EventSinkFactory.other.PooledLoggerFactory.Name: JKOOL-QA
#event.sink.factory.EventSinkFactory.other.PooledLoggerFactory.Size: 5
#event.sink.factory.EventSinkFactory.other.PooledLoggerFactory.Capacity: 1000

#### Sample socket event sink factory configuration ####
#event.sink.factory.EventSinkFactory.other: com.jkoolcloud.tnt4j.sink.impl.SocketEventSinkFactory
; If socket sent data should no be logged anywhere else
#event.sink.factory.EventSinkFactory.other.LogSink: null
; If socket sent data should be logged to file
##event.sink.factory.EventSinkFactory.other.LogSink: file:./logs/tnt4j-stream-jmx_samples_socket.log
#event.sink.factory.EventSinkFactory.other.Host: localhost
#event.sink.factory.EventSinkFactory.other.Port: 6060
#### Sample file sink factory configuration end ####

#### Sample file event sink factory configuration ####
#event.sink.factory.EventSinkFactory.other: com.jkoolcloud.tnt4j.sink.impl.FileEventSinkFactory
#event.sink.factory.EventSinkFactory.other.FileName: ./logs/tnt4j-streams-activities.log
#### Sample file sink factory configuration end ####

#### Kafka event sink factory configuration ####
#event.sink.factory.EventSinkFactory.other: com.jkoolcloud.tnt4j.sink.impl.kafka.KafkaEventSinkFactory
#event.sink.factory.EventSinkFactory.other.propFile: config/tnt4j-kafka.properties
#event.sink.factory.EventSinkFactory.other.topic: tnt4j_kafka
#### Kafka event sink factory configuration end ####

#### MQTT event sink factory configuration ####
#event.sink.factory.EventSinkFactory.other: com.jkoolcloud.tnt4j.sink.impl.mqtt.MqttEventSinkFactory
#event.sink.factory.EventSinkFactory.other.mqtt-server-url: tcp://localhost:1883
#event.sink.factory.EventSinkFactory.other.mqtt-topic: tnt4jStreams
#event.sink.factory.EventSinkFactory.other.mqtt-user: mqtt-user
#event.sink.factory.EventSinkFactory.other.mqtt-pwd: mqtt-pwd
#### MQTT event sink factory configuration end ####
}
